@model projet_ASP.Models.RetourVoiture

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>RetourVoiture</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.idRetour)
    @Html.HiddenFor(model => model.idContrat)

    <div class="form-group">
        @Html.LabelFor(model => model.dateRetour, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.dateRetour, new { htmlAttributes = new { @type = "date", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.dateRetour, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.etat, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <textarea class="form-control" name="etat" id="etat" rows="5"></textarea>
            @Html.ValidationMessageFor(model => model.etat, "", new { @class = "text-danger" })
        </div>
    </div>

    @*    <div class="form-group">
            @Html.LabelFor(model => model.pinalise, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.pinalise)
                    @Html.ValidationMessageFor(model => model.pinalise, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@
    @*  @if(Model.reservations.FirstOrDefault().dateFin > DateTime.Now)*@
    <div class="form-group ">
        <div class="col-md-offset-2 col-md-10">
            <div class="checkbox">
                @* @Html.CheckBoxFor(m => m.pinalise ,new { @class = "control-labe isPenalise" })*@
                <input type="checkbox" name="pinalise" id="pinalise" value="false" class="control-labe pinalise isPenalise" />
                @Html.LabelFor(m => m.pinalise)?
            </div>
            @Html.ValidationMessageFor(model => model.pinalise, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group amende " style="display:none;">
        @Html.LabelFor(model => model.amende, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.amende, new { htmlAttributes = new { @class = "form-control cout" } })

            @Html.ValidationMessageFor(model => model.amende, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
 
<script>
    var ispenaliseCheck = document.getElementsByClassName("isPenalise")[0];
    var amende = document.getElementsByClassName("amende")[0];

    ispenaliseCheck.addEventListener("click", () => {
        amende.style.display = ispenaliseCheck.checked ? "inline" : "none";

    })

</script>